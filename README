NOTE: THIS NEEDS TO BE UPDATED IN LIGHT OF LED_STRING2.RB AND ANIMATOR.RB WHICH SHOULD REPLACE LED_STRING.RB

Just some tinkering with a ws2812b string using arduino and ruby.

Arduino presents a serial interface which accepts the following commands:
x:r,g,b;    -- set led x to r,g,b in buffer, eg: 0:255,255,255;
render;     -- update leds per buffer contents
fill;       -- fill the entire buffer with the same values of the 0th element
list;       -- dump the contents of the buffer in a human-readable format over serial

led_string.rb provides a way to interact with the Arduino:
l = LedString.new # see file for options; various things can be supplied
l.set!(0, {r: 255, g: 255, b: 255}) #set the 0th led to white and render
l.set_pattern!([{r:255}, {g: 255}, {b: 255}]) # set pattern and fill the buffer with the alternating red/green/blue and render
l.loop{|x| x.shift!} # loop block forever, block param is ledstring itself, defaults to 30fps, can be changed

generators.rb provies some functions for generating patterns:
Generators.gradient({r: 255, g: 0}, {r:0, g: 255}, 15) # transition from the first to the second in the course of 15 steps
Generators.color_wheel(30) # generate 30 frames representing one revolution of color wheel (hue from 0-360); can set saturation, value
There are other functions in here for various other tasks, eg:
Generators.reflect pattern # contanates reversed version of pattern to pattern and returns
Generators.constrain # constraints a value to range 0,255, also rounds it (this is configurable by an options hash)

Here's an example of a revolving color wheel larger than the string, scrolling at 25 frames per second, with modified saturation and value
l = LedString.new(pattern: Generators.color_wheel(120, {s: 0.75, v: 0.50}))
l.loop(25){|x| x.next_frame!}

dependencies:
led_string.rb depends on the rubyserial gem
ws2812_serial.ino depends on the FastLED library
